# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplianceOverviewAttributesRequirementsStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passed': 'int',
        'failed': 'int',
        'manual': 'int',
        'total': 'int'
    }

    attribute_map = {
        'passed': 'passed',
        'failed': 'failed',
        'manual': 'manual',
        'total': 'total'
    }

    def __init__(self, passed=None, failed=None, manual=None, total=None):  # noqa: E501
        """ComplianceOverviewAttributesRequirementsStatus - a model defined in Swagger"""  # noqa: E501
        self._passed = None
        self._failed = None
        self._manual = None
        self._total = None
        self.discriminator = None
        if passed is not None:
            self.passed = passed
        if failed is not None:
            self.failed = failed
        if manual is not None:
            self.manual = manual
        if total is not None:
            self.total = total

    @property
    def passed(self):
        """Gets the passed of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501


        :return: The passed of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :rtype: int
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this ComplianceOverviewAttributesRequirementsStatus.


        :param passed: The passed of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :type: int
        """

        self._passed = passed

    @property
    def failed(self):
        """Gets the failed of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501


        :return: The failed of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this ComplianceOverviewAttributesRequirementsStatus.


        :param failed: The failed of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :type: int
        """

        self._failed = failed

    @property
    def manual(self):
        """Gets the manual of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501


        :return: The manual of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :rtype: int
        """
        return self._manual

    @manual.setter
    def manual(self, manual):
        """Sets the manual of this ComplianceOverviewAttributesRequirementsStatus.


        :param manual: The manual of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :type: int
        """

        self._manual = manual

    @property
    def total(self):
        """Gets the total of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501


        :return: The total of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ComplianceOverviewAttributesRequirementsStatus.


        :param total: The total of this ComplianceOverviewAttributesRequirementsStatus.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplianceOverviewAttributesRequirementsStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceOverviewAttributesRequirementsStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
