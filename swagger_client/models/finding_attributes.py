# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FindingAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'delta': 'str',
        'status': 'str',
        'status_extended': 'str',
        'severity': 'str',
        'check_id': 'str',
        'check_metadata': 'object',
        'raw_result': 'object',
        'inserted_at': 'datetime',
        'updated_at': 'datetime',
        'first_seen_at': 'datetime'
    }

    attribute_map = {
        'uid': 'uid',
        'delta': 'delta',
        'status': 'status',
        'status_extended': 'status_extended',
        'severity': 'severity',
        'check_id': 'check_id',
        'check_metadata': 'check_metadata',
        'raw_result': 'raw_result',
        'inserted_at': 'inserted_at',
        'updated_at': 'updated_at',
        'first_seen_at': 'first_seen_at'
    }

    def __init__(self, uid=None, delta=None, status=None, status_extended=None, severity=None, check_id=None, check_metadata=None, raw_result=None, inserted_at=None, updated_at=None, first_seen_at=None):  # noqa: E501
        """FindingAttributes - a model defined in Swagger"""  # noqa: E501
        self._uid = None
        self._delta = None
        self._status = None
        self._status_extended = None
        self._severity = None
        self._check_id = None
        self._check_metadata = None
        self._raw_result = None
        self._inserted_at = None
        self._updated_at = None
        self._first_seen_at = None
        self.discriminator = None
        self.uid = uid
        if delta is not None:
            self.delta = delta
        self.status = status
        if status_extended is not None:
            self.status_extended = status_extended
        self.severity = severity
        self.check_id = check_id
        if check_metadata is not None:
            self.check_metadata = check_metadata
        if raw_result is not None:
            self.raw_result = raw_result
        if inserted_at is not None:
            self.inserted_at = inserted_at
        if updated_at is not None:
            self.updated_at = updated_at
        if first_seen_at is not None:
            self.first_seen_at = first_seen_at

    @property
    def uid(self):
        """Gets the uid of this FindingAttributes.  # noqa: E501


        :return: The uid of this FindingAttributes.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FindingAttributes.


        :param uid: The uid of this FindingAttributes.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def delta(self):
        """Gets the delta of this FindingAttributes.  # noqa: E501

        * `new` - New * `changed` - Changed  # noqa: E501

        :return: The delta of this FindingAttributes.  # noqa: E501
        :rtype: str
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this FindingAttributes.

        * `new` - New * `changed` - Changed  # noqa: E501

        :param delta: The delta of this FindingAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "changed", ""]  # noqa: E501
        if delta not in allowed_values:
            raise ValueError(
                "Invalid value for `delta` ({0}), must be one of {1}"  # noqa: E501
                .format(delta, allowed_values)
            )

        self._delta = delta

    @property
    def status(self):
        """Gets the status of this FindingAttributes.  # noqa: E501

        * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted  # noqa: E501

        :return: The status of this FindingAttributes.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FindingAttributes.

        * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted  # noqa: E501

        :param status: The status of this FindingAttributes.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["FAIL", "PASS", "MANUAL", "MUTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_extended(self):
        """Gets the status_extended of this FindingAttributes.  # noqa: E501


        :return: The status_extended of this FindingAttributes.  # noqa: E501
        :rtype: str
        """
        return self._status_extended

    @status_extended.setter
    def status_extended(self, status_extended):
        """Sets the status_extended of this FindingAttributes.


        :param status_extended: The status_extended of this FindingAttributes.  # noqa: E501
        :type: str
        """

        self._status_extended = status_extended

    @property
    def severity(self):
        """Gets the severity of this FindingAttributes.  # noqa: E501

        * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational  # noqa: E501

        :return: The severity of this FindingAttributes.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this FindingAttributes.

        * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational  # noqa: E501

        :param severity: The severity of this FindingAttributes.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["critical", "high", "medium", "low", "informational"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def check_id(self):
        """Gets the check_id of this FindingAttributes.  # noqa: E501


        :return: The check_id of this FindingAttributes.  # noqa: E501
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this FindingAttributes.


        :param check_id: The check_id of this FindingAttributes.  # noqa: E501
        :type: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")  # noqa: E501

        self._check_id = check_id

    @property
    def check_metadata(self):
        """Gets the check_metadata of this FindingAttributes.  # noqa: E501


        :return: The check_metadata of this FindingAttributes.  # noqa: E501
        :rtype: object
        """
        return self._check_metadata

    @check_metadata.setter
    def check_metadata(self, check_metadata):
        """Sets the check_metadata of this FindingAttributes.


        :param check_metadata: The check_metadata of this FindingAttributes.  # noqa: E501
        :type: object
        """

        self._check_metadata = check_metadata

    @property
    def raw_result(self):
        """Gets the raw_result of this FindingAttributes.  # noqa: E501


        :return: The raw_result of this FindingAttributes.  # noqa: E501
        :rtype: object
        """
        return self._raw_result

    @raw_result.setter
    def raw_result(self, raw_result):
        """Sets the raw_result of this FindingAttributes.


        :param raw_result: The raw_result of this FindingAttributes.  # noqa: E501
        :type: object
        """

        self._raw_result = raw_result

    @property
    def inserted_at(self):
        """Gets the inserted_at of this FindingAttributes.  # noqa: E501


        :return: The inserted_at of this FindingAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._inserted_at

    @inserted_at.setter
    def inserted_at(self, inserted_at):
        """Sets the inserted_at of this FindingAttributes.


        :param inserted_at: The inserted_at of this FindingAttributes.  # noqa: E501
        :type: datetime
        """

        self._inserted_at = inserted_at

    @property
    def updated_at(self):
        """Gets the updated_at of this FindingAttributes.  # noqa: E501


        :return: The updated_at of this FindingAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FindingAttributes.


        :param updated_at: The updated_at of this FindingAttributes.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def first_seen_at(self):
        """Gets the first_seen_at of this FindingAttributes.  # noqa: E501


        :return: The first_seen_at of this FindingAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._first_seen_at

    @first_seen_at.setter
    def first_seen_at(self, first_seen_at):
        """Sets the first_seen_at of this FindingAttributes.


        :param first_seen_at: The first_seen_at of this FindingAttributes.  # noqa: E501
        :type: datetime
        """

        self._first_seen_at = first_seen_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindingAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
