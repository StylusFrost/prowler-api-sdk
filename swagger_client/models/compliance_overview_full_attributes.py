# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplianceOverviewFullAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inserted_at': 'datetime',
        'compliance_id': 'str',
        'framework': 'str',
        'version': 'str',
        'requirements_status': 'ComplianceOverviewAttributesRequirementsStatus',
        'region': 'str',
        'provider_type': 'str',
        'description': 'str',
        'requirements': 'ComplianceOverviewFullAttributesRequirements'
    }

    attribute_map = {
        'inserted_at': 'inserted_at',
        'compliance_id': 'compliance_id',
        'framework': 'framework',
        'version': 'version',
        'requirements_status': 'requirements_status',
        'region': 'region',
        'provider_type': 'provider_type',
        'description': 'description',
        'requirements': 'requirements'
    }

    def __init__(self, inserted_at=None, compliance_id=None, framework=None, version=None, requirements_status=None, region=None, provider_type=None, description=None, requirements=None):  # noqa: E501
        """ComplianceOverviewFullAttributes - a model defined in Swagger"""  # noqa: E501
        self._inserted_at = None
        self._compliance_id = None
        self._framework = None
        self._version = None
        self._requirements_status = None
        self._region = None
        self._provider_type = None
        self._description = None
        self._requirements = None
        self.discriminator = None
        if inserted_at is not None:
            self.inserted_at = inserted_at
        self.compliance_id = compliance_id
        self.framework = framework
        if version is not None:
            self.version = version
        if requirements_status is not None:
            self.requirements_status = requirements_status
        if region is not None:
            self.region = region
        if provider_type is not None:
            self.provider_type = provider_type
        if description is not None:
            self.description = description
        if requirements is not None:
            self.requirements = requirements

    @property
    def inserted_at(self):
        """Gets the inserted_at of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The inserted_at of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._inserted_at

    @inserted_at.setter
    def inserted_at(self, inserted_at):
        """Sets the inserted_at of this ComplianceOverviewFullAttributes.


        :param inserted_at: The inserted_at of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: datetime
        """

        self._inserted_at = inserted_at

    @property
    def compliance_id(self):
        """Gets the compliance_id of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The compliance_id of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: str
        """
        return self._compliance_id

    @compliance_id.setter
    def compliance_id(self, compliance_id):
        """Sets the compliance_id of this ComplianceOverviewFullAttributes.


        :param compliance_id: The compliance_id of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: str
        """
        if compliance_id is None:
            raise ValueError("Invalid value for `compliance_id`, must not be `None`")  # noqa: E501

        self._compliance_id = compliance_id

    @property
    def framework(self):
        """Gets the framework of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The framework of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this ComplianceOverviewFullAttributes.


        :param framework: The framework of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: str
        """
        if framework is None:
            raise ValueError("Invalid value for `framework`, must not be `None`")  # noqa: E501

        self._framework = framework

    @property
    def version(self):
        """Gets the version of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The version of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComplianceOverviewFullAttributes.


        :param version: The version of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def requirements_status(self):
        """Gets the requirements_status of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The requirements_status of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: ComplianceOverviewAttributesRequirementsStatus
        """
        return self._requirements_status

    @requirements_status.setter
    def requirements_status(self, requirements_status):
        """Sets the requirements_status of this ComplianceOverviewFullAttributes.


        :param requirements_status: The requirements_status of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: ComplianceOverviewAttributesRequirementsStatus
        """

        self._requirements_status = requirements_status

    @property
    def region(self):
        """Gets the region of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The region of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ComplianceOverviewFullAttributes.


        :param region: The region of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def provider_type(self):
        """Gets the provider_type of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The provider_type of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this ComplianceOverviewFullAttributes.


        :param provider_type: The provider_type of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    @property
    def description(self):
        """Gets the description of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The description of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ComplianceOverviewFullAttributes.


        :param description: The description of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def requirements(self):
        """Gets the requirements of this ComplianceOverviewFullAttributes.  # noqa: E501


        :return: The requirements of this ComplianceOverviewFullAttributes.  # noqa: E501
        :rtype: ComplianceOverviewFullAttributesRequirements
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this ComplianceOverviewFullAttributes.


        :param requirements: The requirements of this ComplianceOverviewFullAttributes.  # noqa: E501
        :type: ComplianceOverviewFullAttributesRequirements
        """

        self._requirements = requirements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplianceOverviewFullAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceOverviewFullAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
