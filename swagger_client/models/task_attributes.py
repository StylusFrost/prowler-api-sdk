# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inserted_at': 'datetime',
        'completed_at': 'datetime',
        'name': 'str',
        'state': 'str',
        'result': 'object',
        'task_args': 'object',
        'metadata': 'object'
    }

    attribute_map = {
        'inserted_at': 'inserted_at',
        'completed_at': 'completed_at',
        'name': 'name',
        'state': 'state',
        'result': 'result',
        'task_args': 'task_args',
        'metadata': 'metadata'
    }

    def __init__(self, inserted_at=None, completed_at=None, name=None, state=None, result=None, task_args=None, metadata=None):  # noqa: E501
        """TaskAttributes - a model defined in Swagger"""  # noqa: E501
        self._inserted_at = None
        self._completed_at = None
        self._name = None
        self._state = None
        self._result = None
        self._task_args = None
        self._metadata = None
        self.discriminator = None
        if inserted_at is not None:
            self.inserted_at = inserted_at
        if completed_at is not None:
            self.completed_at = completed_at
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if result is not None:
            self.result = result
        if task_args is not None:
            self.task_args = task_args
        if metadata is not None:
            self.metadata = metadata

    @property
    def inserted_at(self):
        """Gets the inserted_at of this TaskAttributes.  # noqa: E501


        :return: The inserted_at of this TaskAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._inserted_at

    @inserted_at.setter
    def inserted_at(self, inserted_at):
        """Sets the inserted_at of this TaskAttributes.


        :param inserted_at: The inserted_at of this TaskAttributes.  # noqa: E501
        :type: datetime
        """

        self._inserted_at = inserted_at

    @property
    def completed_at(self):
        """Gets the completed_at of this TaskAttributes.  # noqa: E501


        :return: The completed_at of this TaskAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this TaskAttributes.


        :param completed_at: The completed_at of this TaskAttributes.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def name(self):
        """Gets the name of this TaskAttributes.  # noqa: E501


        :return: The name of this TaskAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskAttributes.


        :param name: The name of this TaskAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this TaskAttributes.  # noqa: E501


        :return: The state of this TaskAttributes.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskAttributes.


        :param state: The state of this TaskAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "scheduled", "executing", "completed", "failed", "cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def result(self):
        """Gets the result of this TaskAttributes.  # noqa: E501


        :return: The result of this TaskAttributes.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TaskAttributes.


        :param result: The result of this TaskAttributes.  # noqa: E501
        :type: object
        """

        self._result = result

    @property
    def task_args(self):
        """Gets the task_args of this TaskAttributes.  # noqa: E501


        :return: The task_args of this TaskAttributes.  # noqa: E501
        :rtype: object
        """
        return self._task_args

    @task_args.setter
    def task_args(self, task_args):
        """Sets the task_args of this TaskAttributes.


        :param task_args: The task_args of this TaskAttributes.  # noqa: E501
        :type: object
        """

        self._task_args = task_args

    @property
    def metadata(self):
        """Gets the metadata of this TaskAttributes.  # noqa: E501


        :return: The metadata of this TaskAttributes.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TaskAttributes.


        :param metadata: The metadata of this TaskAttributes.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
