# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'password': 'str',
        'tenant_id': 'str',
        'refresh': 'str',
        'access': 'str'
    }

    attribute_map = {
        'email': 'email',
        'password': 'password',
        'tenant_id': 'tenant_id',
        'refresh': 'refresh',
        'access': 'access'
    }

    def __init__(self, email=None, password=None, tenant_id=None, refresh=None, access=None):  # noqa: E501
        """TokenAttributes - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._password = None
        self._tenant_id = None
        self._refresh = None
        self._access = None
        self.discriminator = None
        self.email = email
        self.password = password
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if refresh is not None:
            self.refresh = refresh
        if access is not None:
            self.access = access

    @property
    def email(self):
        """Gets the email of this TokenAttributes.  # noqa: E501


        :return: The email of this TokenAttributes.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TokenAttributes.


        :param email: The email of this TokenAttributes.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this TokenAttributes.  # noqa: E501


        :return: The password of this TokenAttributes.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TokenAttributes.


        :param password: The password of this TokenAttributes.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def tenant_id(self):
        """Gets the tenant_id of this TokenAttributes.  # noqa: E501

        If not provided, the tenant ID of the first membership that was added to the user will be used.  # noqa: E501

        :return: The tenant_id of this TokenAttributes.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this TokenAttributes.

        If not provided, the tenant ID of the first membership that was added to the user will be used.  # noqa: E501

        :param tenant_id: The tenant_id of this TokenAttributes.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def refresh(self):
        """Gets the refresh of this TokenAttributes.  # noqa: E501


        :return: The refresh of this TokenAttributes.  # noqa: E501
        :rtype: str
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this TokenAttributes.


        :param refresh: The refresh of this TokenAttributes.  # noqa: E501
        :type: str
        """

        self._refresh = refresh

    @property
    def access(self):
        """Gets the access of this TokenAttributes.  # noqa: E501


        :return: The access of this TokenAttributes.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this TokenAttributes.


        :param access: The access of this TokenAttributes.  # noqa: E501
        :type: str
        """

        self._access = access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
