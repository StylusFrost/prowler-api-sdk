# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScanAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'trigger': 'str',
        'state': 'str',
        'unique_resource_count': 'int',
        'progress': 'int',
        'duration': 'int',
        'inserted_at': 'datetime',
        'started_at': 'datetime',
        'completed_at': 'datetime',
        'scheduled_at': 'datetime',
        'next_scan_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'trigger': 'trigger',
        'state': 'state',
        'unique_resource_count': 'unique_resource_count',
        'progress': 'progress',
        'duration': 'duration',
        'inserted_at': 'inserted_at',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'scheduled_at': 'scheduled_at',
        'next_scan_at': 'next_scan_at'
    }

    def __init__(self, name=None, trigger=None, state=None, unique_resource_count=None, progress=None, duration=None, inserted_at=None, started_at=None, completed_at=None, scheduled_at=None, next_scan_at=None):  # noqa: E501
        """ScanAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._trigger = None
        self._state = None
        self._unique_resource_count = None
        self._progress = None
        self._duration = None
        self._inserted_at = None
        self._started_at = None
        self._completed_at = None
        self._scheduled_at = None
        self._next_scan_at = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if trigger is not None:
            self.trigger = trigger
        if state is not None:
            self.state = state
        if unique_resource_count is not None:
            self.unique_resource_count = unique_resource_count
        if progress is not None:
            self.progress = progress
        if duration is not None:
            self.duration = duration
        if inserted_at is not None:
            self.inserted_at = inserted_at
        if started_at is not None:
            self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        if scheduled_at is not None:
            self.scheduled_at = scheduled_at
        if next_scan_at is not None:
            self.next_scan_at = next_scan_at

    @property
    def name(self):
        """Gets the name of this ScanAttributes.  # noqa: E501


        :return: The name of this ScanAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScanAttributes.


        :param name: The name of this ScanAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def trigger(self):
        """Gets the trigger of this ScanAttributes.  # noqa: E501

        * `scheduled` - Scheduled * `manual` - Manual  # noqa: E501

        :return: The trigger of this ScanAttributes.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this ScanAttributes.

        * `scheduled` - Scheduled * `manual` - Manual  # noqa: E501

        :param trigger: The trigger of this ScanAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["scheduled", "manual"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def state(self):
        """Gets the state of this ScanAttributes.  # noqa: E501

        * `available` - Available * `scheduled` - Scheduled * `executing` - Executing * `completed` - Completed * `failed` - Failed * `cancelled` - Cancelled  # noqa: E501

        :return: The state of this ScanAttributes.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScanAttributes.

        * `available` - Available * `scheduled` - Scheduled * `executing` - Executing * `completed` - Completed * `failed` - Failed * `cancelled` - Cancelled  # noqa: E501

        :param state: The state of this ScanAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "scheduled", "executing", "completed", "failed", "cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unique_resource_count(self):
        """Gets the unique_resource_count of this ScanAttributes.  # noqa: E501


        :return: The unique_resource_count of this ScanAttributes.  # noqa: E501
        :rtype: int
        """
        return self._unique_resource_count

    @unique_resource_count.setter
    def unique_resource_count(self, unique_resource_count):
        """Sets the unique_resource_count of this ScanAttributes.


        :param unique_resource_count: The unique_resource_count of this ScanAttributes.  # noqa: E501
        :type: int
        """

        self._unique_resource_count = unique_resource_count

    @property
    def progress(self):
        """Gets the progress of this ScanAttributes.  # noqa: E501


        :return: The progress of this ScanAttributes.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ScanAttributes.


        :param progress: The progress of this ScanAttributes.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def duration(self):
        """Gets the duration of this ScanAttributes.  # noqa: E501


        :return: The duration of this ScanAttributes.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ScanAttributes.


        :param duration: The duration of this ScanAttributes.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def inserted_at(self):
        """Gets the inserted_at of this ScanAttributes.  # noqa: E501


        :return: The inserted_at of this ScanAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._inserted_at

    @inserted_at.setter
    def inserted_at(self, inserted_at):
        """Sets the inserted_at of this ScanAttributes.


        :param inserted_at: The inserted_at of this ScanAttributes.  # noqa: E501
        :type: datetime
        """

        self._inserted_at = inserted_at

    @property
    def started_at(self):
        """Gets the started_at of this ScanAttributes.  # noqa: E501


        :return: The started_at of this ScanAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ScanAttributes.


        :param started_at: The started_at of this ScanAttributes.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this ScanAttributes.  # noqa: E501


        :return: The completed_at of this ScanAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ScanAttributes.


        :param completed_at: The completed_at of this ScanAttributes.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this ScanAttributes.  # noqa: E501


        :return: The scheduled_at of this ScanAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this ScanAttributes.


        :param scheduled_at: The scheduled_at of this ScanAttributes.  # noqa: E501
        :type: datetime
        """

        self._scheduled_at = scheduled_at

    @property
    def next_scan_at(self):
        """Gets the next_scan_at of this ScanAttributes.  # noqa: E501


        :return: The next_scan_at of this ScanAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._next_scan_at

    @next_scan_at.setter
    def next_scan_at(self, next_scan_at):
        """Sets the next_scan_at of this ScanAttributes.


        :param next_scan_at: The next_scan_at of this ScanAttributes.  # noqa: E501
        :type: datetime
        """

        self._next_scan_at = next_scan_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScanAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScanAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
