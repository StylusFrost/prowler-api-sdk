# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def scans_create(self, body, **kwargs):  # noqa: E501
        """Trigger a manual scan  # noqa: E501

        Trigger a manual scan by providing the required scan details. If `scanner_args` are not provided, the system will automatically use the default settings from the associated provider. If you do provide `scanner_args`, these settings will be merged with the provider's defaults. This means that your provided settings will override the defaults only where they conflict, while the rest of the default settings will remain intact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScanCreateRequest body: (required)
        :return: OpenApiResponseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def scans_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Trigger a manual scan  # noqa: E501

        Trigger a manual scan by providing the required scan details. If `scanner_args` are not provided, the system will automatically use the default settings from the associated provider. If you do provide `scanner_args`, these settings will be merged with the provider's defaults. This means that your provided settings will override the defaults only where they conflict, while the rest of the default settings will remain intact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScanCreateRequest body: (required)
        :return: OpenApiResponseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `scans_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpenApiResponseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_create(self, data2, data, **kwargs):  # noqa: E501
        """Trigger a manual scan  # noqa: E501

        Trigger a manual scan by providing the required scan details. If `scanner_args` are not provided, the system will automatically use the default settings from the associated provider. If you do provide `scanner_args`, these settings will be merged with the provider's defaults. This means that your provided settings will override the defaults only where they conflict, while the rest of the default settings will remain intact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScanCreateRequestData data2: (required)
        :param ScanCreateRequestData data: (required)
        :return: OpenApiResponseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def scans_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Trigger a manual scan  # noqa: E501

        Trigger a manual scan by providing the required scan details. If `scanner_args` are not provided, the system will automatically use the default settings from the associated provider. If you do provide `scanner_args`, these settings will be merged with the provider's defaults. This means that your provided settings will override the defaults only where they conflict, while the rest of the default settings will remain intact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScanCreateRequestData data2: (required)
        :param ScanCreateRequestData data: (required)
        :return: OpenApiResponseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `scans_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `scans_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpenApiResponseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_create(self, data2, data, **kwargs):  # noqa: E501
        """Trigger a manual scan  # noqa: E501

        Trigger a manual scan by providing the required scan details. If `scanner_args` are not provided, the system will automatically use the default settings from the associated provider. If you do provide `scanner_args`, these settings will be merged with the provider's defaults. This means that your provided settings will override the defaults only where they conflict, while the rest of the default settings will remain intact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScanCreateRequestData data2: (required)
        :param ScanCreateRequestData data: (required)
        :return: OpenApiResponseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def scans_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Trigger a manual scan  # noqa: E501

        Trigger a manual scan by providing the required scan details. If `scanner_args` are not provided, the system will automatically use the default settings from the associated provider. If you do provide `scanner_args`, these settings will be merged with the provider's defaults. This means that your provided settings will override the defaults only where they conflict, while the rest of the default settings will remain intact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScanCreateRequestData data2: (required)
        :param ScanCreateRequestData data: (required)
        :return: OpenApiResponseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `scans_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `scans_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OpenApiResponseResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_list(self, **kwargs):  # noqa: E501
        """List all scans  # noqa: E501

        Retrieve a list of all scans with options for filtering by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_scans: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_completed_at:
        :param date filter_inserted_at:
        :param str filter_name:
        :param str filter_name__icontains:
        :param date filter_next_scan_at:
        :param datetime filter_next_scan_at__gte:
        :param datetime filter_next_scan_at__lte:
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param date filter_started_at:
        :param datetime filter_started_at__gte:
        :param datetime filter_started_at__lte:
        :param str filter_state: * `available` - Available * `scheduled` - Scheduled * `executing` - Executing * `completed` - Completed * `failed` - Failed * `cancelled` - Cancelled
        :param list[str] filter_state__in: Multiple values may be separated by commas.  * `available` - Available * `scheduled` - Scheduled * `executing` - Executing * `completed` - Completed * `failed` - Failed * `cancelled` - Cancelled
        :param str filter_trigger: * `scheduled` - Scheduled * `manual` - Manual
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedScanList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.scans_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def scans_list_with_http_info(self, **kwargs):  # noqa: E501
        """List all scans  # noqa: E501

        Retrieve a list of all scans with options for filtering by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_scans: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_completed_at:
        :param date filter_inserted_at:
        :param str filter_name:
        :param str filter_name__icontains:
        :param date filter_next_scan_at:
        :param datetime filter_next_scan_at__gte:
        :param datetime filter_next_scan_at__lte:
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param date filter_started_at:
        :param datetime filter_started_at__gte:
        :param datetime filter_started_at__lte:
        :param str filter_state: * `available` - Available * `scheduled` - Scheduled * `executing` - Executing * `completed` - Completed * `failed` - Failed * `cancelled` - Cancelled
        :param list[str] filter_state__in: Multiple values may be separated by commas.  * `available` - Available * `scheduled` - Scheduled * `executing` - Executing * `completed` - Completed * `failed` - Failed * `cancelled` - Cancelled
        :param str filter_trigger: * `scheduled` - Scheduled * `manual` - Manual
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedScanList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_scans', 'filter_completed_at', 'filter_inserted_at', 'filter_name', 'filter_name__icontains', 'filter_next_scan_at', 'filter_next_scan_at__gte', 'filter_next_scan_at__lte', 'filter_provider', 'filter_provider__in', 'filter_provider_alias', 'filter_provider_alias__icontains', 'filter_provider_alias__in', 'filter_provider_type', 'filter_provider_type__in', 'filter_provider_uid', 'filter_provider_uid__icontains', 'filter_provider_uid__in', 'filter_search', 'filter_started_at', 'filter_started_at__gte', 'filter_started_at__lte', 'filter_state', 'filter_state__in', 'filter_trigger', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_scans' in params:
            query_params.append(('fields[scans]', params['fields_scans']))  # noqa: E501
            collection_formats['fields[scans]'] = 'csv'  # noqa: E501
        if 'filter_completed_at' in params:
            query_params.append(('filter[completed_at]', params['filter_completed_at']))  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter[name]', params['filter_name']))  # noqa: E501
        if 'filter_name__icontains' in params:
            query_params.append(('filter[name__icontains]', params['filter_name__icontains']))  # noqa: E501
        if 'filter_next_scan_at' in params:
            query_params.append(('filter[next_scan_at]', params['filter_next_scan_at']))  # noqa: E501
        if 'filter_next_scan_at__gte' in params:
            query_params.append(('filter[next_scan_at__gte]', params['filter_next_scan_at__gte']))  # noqa: E501
        if 'filter_next_scan_at__lte' in params:
            query_params.append(('filter[next_scan_at__lte]', params['filter_next_scan_at__lte']))  # noqa: E501
        if 'filter_provider' in params:
            query_params.append(('filter[provider]', params['filter_provider']))  # noqa: E501
        if 'filter_provider__in' in params:
            query_params.append(('filter[provider__in]', params['filter_provider__in']))  # noqa: E501
            collection_formats['filter[provider__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_alias' in params:
            query_params.append(('filter[provider_alias]', params['filter_provider_alias']))  # noqa: E501
        if 'filter_provider_alias__icontains' in params:
            query_params.append(('filter[provider_alias__icontains]', params['filter_provider_alias__icontains']))  # noqa: E501
        if 'filter_provider_alias__in' in params:
            query_params.append(('filter[provider_alias__in]', params['filter_provider_alias__in']))  # noqa: E501
            collection_formats['filter[provider_alias__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_uid' in params:
            query_params.append(('filter[provider_uid]', params['filter_provider_uid']))  # noqa: E501
        if 'filter_provider_uid__icontains' in params:
            query_params.append(('filter[provider_uid__icontains]', params['filter_provider_uid__icontains']))  # noqa: E501
        if 'filter_provider_uid__in' in params:
            query_params.append(('filter[provider_uid__in]', params['filter_provider_uid__in']))  # noqa: E501
            collection_formats['filter[provider_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'filter_started_at' in params:
            query_params.append(('filter[started_at]', params['filter_started_at']))  # noqa: E501
        if 'filter_started_at__gte' in params:
            query_params.append(('filter[started_at__gte]', params['filter_started_at__gte']))  # noqa: E501
        if 'filter_started_at__lte' in params:
            query_params.append(('filter[started_at__lte]', params['filter_started_at__lte']))  # noqa: E501
        if 'filter_state' in params:
            query_params.append(('filter[state]', params['filter_state']))  # noqa: E501
        if 'filter_state__in' in params:
            query_params.append(('filter[state__in]', params['filter_state__in']))  # noqa: E501
            collection_formats['filter[state__in]'] = 'csv'  # noqa: E501
        if 'filter_trigger' in params:
            query_params.append(('filter[trigger]', params['filter_trigger']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedScanList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_partial_update(self, body, id, **kwargs):  # noqa: E501
        """Partially update a scan  # noqa: E501

        Update certain fields of an existing scan without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_partial_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedScanUpdateRequest body: (required)
        :param str id: A UUID string identifying this scan. (required)
        :return: ScanUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_partial_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_partial_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def scans_partial_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Partially update a scan  # noqa: E501

        Update certain fields of an existing scan without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_partial_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedScanUpdateRequest body: (required)
        :param str id: A UUID string identifying this scan. (required)
        :return: ScanUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `scans_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `scans_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_partial_update(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a scan  # noqa: E501

        Update certain fields of an existing scan without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_partial_update(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedScanUpdateRequestData data2: (required)
        :param PatchedScanUpdateRequestData data: (required)
        :param str id: A UUID string identifying this scan. (required)
        :return: ScanUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
            return data

    def scans_partial_update_with_http_info(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a scan  # noqa: E501

        Update certain fields of an existing scan without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_partial_update_with_http_info(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedScanUpdateRequestData data2: (required)
        :param PatchedScanUpdateRequestData data: (required)
        :param str id: A UUID string identifying this scan. (required)
        :return: ScanUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `scans_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `scans_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `scans_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_partial_update(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a scan  # noqa: E501

        Update certain fields of an existing scan without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_partial_update(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedScanUpdateRequestData data2: (required)
        :param PatchedScanUpdateRequestData data: (required)
        :param str id: A UUID string identifying this scan. (required)
        :return: ScanUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
            return data

    def scans_partial_update_with_http_info(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a scan  # noqa: E501

        Update certain fields of an existing scan without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_partial_update_with_http_info(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedScanUpdateRequestData data2: (required)
        :param PatchedScanUpdateRequestData data: (required)
        :param str id: A UUID string identifying this scan. (required)
        :return: ScanUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `scans_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `scans_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `scans_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_report_retrieve(self, id, **kwargs):  # noqa: E501
        """Download ZIP report  # noqa: E501

        Returns a ZIP file containing the requested report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_report_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this scan. (required)
        :param list[str] fields_scan_reports: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_report_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_report_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def scans_report_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """Download ZIP report  # noqa: E501

        Returns a ZIP file containing the requested report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_report_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this scan. (required)
        :param list[str] fields_scan_reports: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields_scan_reports']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_report_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `scans_report_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields_scan_reports' in params:
            query_params.append(('fields[scan-reports]', params['fields_scan_reports']))  # noqa: E501
            collection_formats['fields[scan-reports]'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans/{id}/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scans_retrieve(self, id, **kwargs):  # noqa: E501
        """Retrieve data from a specific scan  # noqa: E501

        Fetch detailed information about a specific scan by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this scan. (required)
        :param list[str] fields_scans: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: ScanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scans_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.scans_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def scans_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve data from a specific scan  # noqa: E501

        Fetch detailed information about a specific scan by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scans_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this scan. (required)
        :param list[str] fields_scans: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: ScanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields_scans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scans_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `scans_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields_scans' in params:
            query_params.append(('fields[scans]', params['fields_scans']))  # noqa: E501
            collection_formats['fields[scans]'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/scans/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
