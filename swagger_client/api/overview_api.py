# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OverviewApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def overviews_findings_retrieve(self, **kwargs):  # noqa: E501
        """Get aggregated findings data  # noqa: E501

        Fetch aggregated findings data across all providers, grouped by various metrics such as passed, failed, muted, and total findings. This endpoint calculates summary statistics based on the latest scans for each provider and applies any provided filters, such as region, provider type, and scan date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_findings_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_findings_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param bool filter_muted_findings:
        :param str filter_provider_id:
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: OverviewFindingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overviews_findings_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overviews_findings_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def overviews_findings_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """Get aggregated findings data  # noqa: E501

        Fetch aggregated findings data across all providers, grouped by various metrics such as passed, failed, muted, and total findings. This endpoint calculates summary statistics based on the latest scans for each provider and applies any provided filters, such as region, provider type, and scan date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_findings_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_findings_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param bool filter_muted_findings:
        :param str filter_provider_id:
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: OverviewFindingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_findings_overview', 'filter_inserted_at', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_muted_findings', 'filter_provider_id', 'filter_provider_type', 'filter_provider_type__in', 'filter_region', 'filter_region__icontains', 'filter_region__in', 'filter_search', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overviews_findings_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_findings_overview' in params:
            query_params.append(('fields[findings-overview]', params['fields_findings_overview']))  # noqa: E501
            collection_formats['fields[findings-overview]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_muted_findings' in params:
            query_params.append(('filter[muted_findings]', params['filter_muted_findings']))  # noqa: E501
        if 'filter_provider_id' in params:
            query_params.append(('filter[provider_id]', params['filter_provider_id']))  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_region' in params:
            query_params.append(('filter[region]', params['filter_region']))  # noqa: E501
        if 'filter_region__icontains' in params:
            query_params.append(('filter[region__icontains]', params['filter_region__icontains']))  # noqa: E501
        if 'filter_region__in' in params:
            query_params.append(('filter[region__in]', params['filter_region__in']))  # noqa: E501
            collection_formats['filter[region__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/overviews/findings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OverviewFindingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overviews_findings_severity_retrieve(self, **kwargs):  # noqa: E501
        """Get findings data by severity  # noqa: E501

        Retrieve an aggregated summary of findings grouped by severity levels, such as low, medium, high, and critical. The response includes the total count of findings for each severity, considering only the latest scans for each provider. Additional filters can be applied to narrow down results by region, provider type, or other attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_findings_severity_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_findings_severity_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param bool filter_muted_findings:
        :param str filter_provider_id:
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: OverviewSeverityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overviews_findings_severity_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overviews_findings_severity_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def overviews_findings_severity_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """Get findings data by severity  # noqa: E501

        Retrieve an aggregated summary of findings grouped by severity levels, such as low, medium, high, and critical. The response includes the total count of findings for each severity, considering only the latest scans for each provider. Additional filters can be applied to narrow down results by region, provider type, or other attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_findings_severity_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_findings_severity_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param bool filter_muted_findings:
        :param str filter_provider_id:
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: OverviewSeverityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_findings_severity_overview', 'filter_inserted_at', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_muted_findings', 'filter_provider_id', 'filter_provider_type', 'filter_provider_type__in', 'filter_region', 'filter_region__icontains', 'filter_region__in', 'filter_search', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overviews_findings_severity_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_findings_severity_overview' in params:
            query_params.append(('fields[findings-severity-overview]', params['fields_findings_severity_overview']))  # noqa: E501
            collection_formats['fields[findings-severity-overview]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_muted_findings' in params:
            query_params.append(('filter[muted_findings]', params['filter_muted_findings']))  # noqa: E501
        if 'filter_provider_id' in params:
            query_params.append(('filter[provider_id]', params['filter_provider_id']))  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_region' in params:
            query_params.append(('filter[region]', params['filter_region']))  # noqa: E501
        if 'filter_region__icontains' in params:
            query_params.append(('filter[region__icontains]', params['filter_region__icontains']))  # noqa: E501
        if 'filter_region__in' in params:
            query_params.append(('filter[region__in]', params['filter_region__in']))  # noqa: E501
            collection_formats['filter[region__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/overviews/findings_severity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OverviewSeverityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overviews_providers_retrieve(self, **kwargs):  # noqa: E501
        """Get aggregated provider data  # noqa: E501

        Retrieve an aggregated overview of findings and resources grouped by providers. The response includes the count of passed, failed, and manual findings, along with the total number of resources managed by each provider. Only the latest findings for each provider are considered in the aggregation to ensure accurate and up-to-date insights.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_providers_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_providers_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: OverviewProviderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overviews_providers_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overviews_providers_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def overviews_providers_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """Get aggregated provider data  # noqa: E501

        Retrieve an aggregated overview of findings and resources grouped by providers. The response includes the count of passed, failed, and manual findings, along with the total number of resources managed by each provider. Only the latest findings for each provider are considered in the aggregation to ensure accurate and up-to-date insights.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_providers_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_providers_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: OverviewProviderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_providers_overview']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overviews_providers_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_providers_overview' in params:
            query_params.append(('fields[providers-overview]', params['fields_providers_overview']))  # noqa: E501
            collection_formats['fields[providers-overview]'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/overviews/providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OverviewProviderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def overviews_services_retrieve(self, **kwargs):  # noqa: E501
        """Get findings data by service  # noqa: E501

        Retrieve an aggregated summary of findings grouped by service. The response includes the total count of findings for each service, as long as there are at least one finding for that service. At least one of the `inserted_at` filters must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_services_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_services_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param str filter_provider_id:
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: OverviewServiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.overviews_services_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.overviews_services_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def overviews_services_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """Get findings data by service  # noqa: E501

        Retrieve an aggregated summary of findings grouped by service. The response includes the total count of findings for each service, as long as there are at least one finding for that service. At least one of the `inserted_at` filters must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.overviews_services_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_services_overview: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param str filter_provider_id:
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: OverviewServiceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_services_overview', 'filter_inserted_at', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_provider_id', 'filter_provider_type', 'filter_provider_type__in', 'filter_region', 'filter_region__icontains', 'filter_region__in', 'filter_search', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method overviews_services_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_services_overview' in params:
            query_params.append(('fields[services-overview]', params['fields_services_overview']))  # noqa: E501
            collection_formats['fields[services-overview]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_provider_id' in params:
            query_params.append(('filter[provider_id]', params['filter_provider_id']))  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_region' in params:
            query_params.append(('filter[region]', params['filter_region']))  # noqa: E501
        if 'filter_region__icontains' in params:
            query_params.append(('filter[region__icontains]', params['filter_region__icontains']))  # noqa: E501
        if 'filter_region__in' in params:
            query_params.append(('filter[region__in]', params['filter_region__in']))  # noqa: E501
            collection_formats['filter[region__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/overviews/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OverviewServiceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
