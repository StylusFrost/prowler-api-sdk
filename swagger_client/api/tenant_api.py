# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TenantApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tenants_create(self, body, **kwargs):  # noqa: E501
        """Create a new tenant  # noqa: E501

        Add a new tenant to the system by providing the required tenant details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantRequest body: (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tenants_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new tenant  # noqa: E501

        Add a new tenant to the system by providing the required tenant details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantRequest body: (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tenants_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_create(self, data2, data, **kwargs):  # noqa: E501
        """Create a new tenant  # noqa: E501

        Add a new tenant to the system by providing the required tenant details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantRequestData data2: (required)
        :param TenantRequestData data: (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tenants_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Create a new tenant  # noqa: E501

        Add a new tenant to the system by providing the required tenant details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantRequestData data2: (required)
        :param TenantRequestData data: (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tenants_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tenants_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_create(self, data2, data, **kwargs):  # noqa: E501
        """Create a new tenant  # noqa: E501

        Add a new tenant to the system by providing the required tenant details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantRequestData data2: (required)
        :param TenantRequestData data: (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tenants_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Create a new tenant  # noqa: E501

        Add a new tenant to the system by providing the required tenant details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TenantRequestData data2: (required)
        :param TenantRequestData data: (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tenants_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tenants_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_destroy(self, id, **kwargs):  # noqa: E501
        """Delete a tenant  # noqa: E501

        Remove a tenant from the system by their ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this tenant. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenants_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a tenant  # noqa: E501

        Remove a tenant from the system by their ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this tenant. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenants_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_list(self, **kwargs):  # noqa: E501
        """List all tenants  # noqa: E501

        Retrieve a list of all tenants with options for filtering by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_tenants: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param str filter_name:
        :param str filter_name__icontains:
        :param str filter_search: A search term.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedTenantList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tenants_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def tenants_list_with_http_info(self, **kwargs):  # noqa: E501
        """List all tenants  # noqa: E501

        Retrieve a list of all tenants with options for filtering by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_tenants: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param datetime filter_inserted_at__gte:
        :param datetime filter_inserted_at__lte:
        :param str filter_name:
        :param str filter_name__icontains:
        :param str filter_search: A search term.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedTenantList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_tenants', 'filter_inserted_at', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_name', 'filter_name__icontains', 'filter_search', 'filter_updated_at', 'filter_updated_at__gte', 'filter_updated_at__lte', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_tenants' in params:
            query_params.append(('fields[tenants]', params['fields_tenants']))  # noqa: E501
            collection_formats['fields[tenants]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_name' in params:
            query_params.append(('filter[name]', params['filter_name']))  # noqa: E501
        if 'filter_name__icontains' in params:
            query_params.append(('filter[name__icontains]', params['filter_name__icontains']))  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'filter_updated_at' in params:
            query_params.append(('filter[updated_at]', params['filter_updated_at']))  # noqa: E501
        if 'filter_updated_at__gte' in params:
            query_params.append(('filter[updated_at__gte]', params['filter_updated_at__gte']))  # noqa: E501
        if 'filter_updated_at__lte' in params:
            query_params.append(('filter[updated_at__lte]', params['filter_updated_at__lte']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedTenantList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_memberships_destroy(self, id, tenant_pk, **kwargs):  # noqa: E501
        """Delete tenant memberships  # noqa: E501

        Delete the membership details of users in a tenant. You need to be one of the owners to delete a membership that is not yours. If you are the last owner of a tenant, you cannot delete your own membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_memberships_destroy(id, tenant_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this membership. (required)
        :param str tenant_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_memberships_destroy_with_http_info(id, tenant_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_memberships_destroy_with_http_info(id, tenant_pk, **kwargs)  # noqa: E501
            return data

    def tenants_memberships_destroy_with_http_info(self, id, tenant_pk, **kwargs):  # noqa: E501
        """Delete tenant memberships  # noqa: E501

        Delete the membership details of users in a tenant. You need to be one of the owners to delete a membership that is not yours. If you are the last owner of a tenant, you cannot delete your own membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_memberships_destroy_with_http_info(id, tenant_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this membership. (required)
        :param str tenant_pk: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tenant_pk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_memberships_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenants_memberships_destroy`")  # noqa: E501
        # verify the required parameter 'tenant_pk' is set
        if ('tenant_pk' not in params or
                params['tenant_pk'] is None):
            raise ValueError("Missing the required parameter `tenant_pk` when calling `tenants_memberships_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'tenant_pk' in params:
            path_params['tenant_pk'] = params['tenant_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{tenant_pk}/memberships/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_memberships_list(self, tenant_pk, **kwargs):  # noqa: E501
        """List tenant memberships  # noqa: E501

        List the membership details of users in a tenant you are a part of.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_memberships_list(tenant_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_pk: Tenant ID (required)
        :param list[str] fields_memberships: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_search: A search term.
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedMembershipList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_memberships_list_with_http_info(tenant_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_memberships_list_with_http_info(tenant_pk, **kwargs)  # noqa: E501
            return data

    def tenants_memberships_list_with_http_info(self, tenant_pk, **kwargs):  # noqa: E501
        """List tenant memberships  # noqa: E501

        List the membership details of users in a tenant you are a part of.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_memberships_list_with_http_info(tenant_pk, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_pk: Tenant ID (required)
        :param list[str] fields_memberships: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_search: A search term.
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedMembershipList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_pk', 'fields_memberships', 'filter_search', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_memberships_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_pk' is set
        if ('tenant_pk' not in params or
                params['tenant_pk'] is None):
            raise ValueError("Missing the required parameter `tenant_pk` when calling `tenants_memberships_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_pk' in params:
            path_params['tenant_pk'] = params['tenant_pk']  # noqa: E501

        query_params = []
        if 'fields_memberships' in params:
            query_params.append(('fields[memberships]', params['fields_memberships']))  # noqa: E501
            collection_formats['fields[memberships]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{tenant_pk}/memberships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedMembershipList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_partial_update(self, body, id, **kwargs):  # noqa: E501
        """Partially update a tenant  # noqa: E501

        Update certain fields of an existing tenant's information without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_partial_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTenantRequest body: (required)
        :param str id: A UUID string identifying this tenant. (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_partial_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_partial_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def tenants_partial_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Partially update a tenant  # noqa: E501

        Update certain fields of an existing tenant's information without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_partial_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTenantRequest body: (required)
        :param str id: A UUID string identifying this tenant. (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tenants_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenants_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_partial_update(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a tenant  # noqa: E501

        Update certain fields of an existing tenant's information without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_partial_update(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTenantRequestData data2: (required)
        :param PatchedTenantRequestData data: (required)
        :param str id: A UUID string identifying this tenant. (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
            return data

    def tenants_partial_update_with_http_info(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a tenant  # noqa: E501

        Update certain fields of an existing tenant's information without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_partial_update_with_http_info(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTenantRequestData data2: (required)
        :param PatchedTenantRequestData data: (required)
        :param str id: A UUID string identifying this tenant. (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tenants_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tenants_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenants_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_partial_update(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a tenant  # noqa: E501

        Update certain fields of an existing tenant's information without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_partial_update(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTenantRequestData data2: (required)
        :param PatchedTenantRequestData data: (required)
        :param str id: A UUID string identifying this tenant. (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_partial_update_with_http_info(data2, data, id, **kwargs)  # noqa: E501
            return data

    def tenants_partial_update_with_http_info(self, data2, data, id, **kwargs):  # noqa: E501
        """Partially update a tenant  # noqa: E501

        Update certain fields of an existing tenant's information without affecting other fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_partial_update_with_http_info(data2, data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PatchedTenantRequestData data2: (required)
        :param PatchedTenantRequestData data: (required)
        :param str id: A UUID string identifying this tenant. (required)
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tenants_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tenants_partial_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenants_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenants_retrieve(self, id, **kwargs):  # noqa: E501
        """Retrieve data from a tenant  # noqa: E501

        Fetch detailed information about a specific tenant by their ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this tenant. (required)
        :param list[str] fields_tenants: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenants_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tenants_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tenants_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve data from a tenant  # noqa: E501

        Fetch detailed information about a specific tenant by their ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenants_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this tenant. (required)
        :param list[str] fields_tenants: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :return: TenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields_tenants']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenants_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `tenants_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields_tenants' in params:
            query_params.append(('fields[tenants]', params['fields_tenants']))  # noqa: E501
            collection_formats['fields[tenants]'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tenants/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
