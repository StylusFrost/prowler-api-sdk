# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FindingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def findings_findings_services_regions_retrieve(self, **kwargs):  # noqa: E501
        """Retrieve the services and regions that are impacted by findings  # noqa: E501

        Fetch services and regions affected in findings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_findings_services_regions_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_finding_dynamic_filters: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_check_id:
        :param str filter_check_id__icontains:
        :param list[str] filter_check_id__in: Multiple values may be separated by commas.
        :param str filter_delta: * `new` - New * `changed` - Changed
        :param list[str] filter_delta__in: Multiple values may be separated by commas.
        :param str filter_id:
        :param list[str] filter_id__in: Multiple values may be separated by commas.
        :param str filter_impact: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_impact__in: Multiple values may be separated by commas.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param date filter_inserted_at__gte: Maximum date range is 7 days.
        :param date filter_inserted_at__lte: Maximum date range is 7 days.
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_resource_name:
        :param str filter_resource_name__icontains:
        :param list[str] filter_resource_name__in: Multiple values may be separated by commas.
        :param str filter_resource_type:
        :param str filter_resource_type__icontains:
        :param list[str] filter_resource_type__in: Multiple values may be separated by commas.
        :param str filter_resource_uid:
        :param str filter_resource_uid__icontains:
        :param list[str] filter_resource_uid__in: Multiple values may be separated by commas.
        :param list[str] filter_resources: Multiple values may be separated by commas.
        :param str filter_scan:
        :param list[str] filter_scan__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param str filter_service:
        :param str filter_service__icontains:
        :param list[str] filter_service__in: Multiple values may be separated by commas.
        :param str filter_severity: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_severity__in: Multiple values may be separated by commas.
        :param str filter_status: * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted
        :param list[str] filter_status__in: Multiple values may be separated by commas.
        :param str filter_uid:
        :param list[str] filter_uid__in: Multiple values may be separated by commas.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: FindingDynamicFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.findings_findings_services_regions_retrieve_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.findings_findings_services_regions_retrieve_with_http_info(**kwargs)  # noqa: E501
            return data

    def findings_findings_services_regions_retrieve_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the services and regions that are impacted by findings  # noqa: E501

        Fetch services and regions affected in findings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_findings_services_regions_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields_finding_dynamic_filters: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_check_id:
        :param str filter_check_id__icontains:
        :param list[str] filter_check_id__in: Multiple values may be separated by commas.
        :param str filter_delta: * `new` - New * `changed` - Changed
        :param list[str] filter_delta__in: Multiple values may be separated by commas.
        :param str filter_id:
        :param list[str] filter_id__in: Multiple values may be separated by commas.
        :param str filter_impact: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_impact__in: Multiple values may be separated by commas.
        :param date filter_inserted_at:
        :param date filter_inserted_at__date:
        :param date filter_inserted_at__gte: Maximum date range is 7 days.
        :param date filter_inserted_at__lte: Maximum date range is 7 days.
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_resource_name:
        :param str filter_resource_name__icontains:
        :param list[str] filter_resource_name__in: Multiple values may be separated by commas.
        :param str filter_resource_type:
        :param str filter_resource_type__icontains:
        :param list[str] filter_resource_type__in: Multiple values may be separated by commas.
        :param str filter_resource_uid:
        :param str filter_resource_uid__icontains:
        :param list[str] filter_resource_uid__in: Multiple values may be separated by commas.
        :param list[str] filter_resources: Multiple values may be separated by commas.
        :param str filter_scan:
        :param list[str] filter_scan__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param str filter_service:
        :param str filter_service__icontains:
        :param list[str] filter_service__in: Multiple values may be separated by commas.
        :param str filter_severity: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_severity__in: Multiple values may be separated by commas.
        :param str filter_status: * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted
        :param list[str] filter_status__in: Multiple values may be separated by commas.
        :param str filter_uid:
        :param list[str] filter_uid__in: Multiple values may be separated by commas.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: FindingDynamicFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields_finding_dynamic_filters', 'filter_check_id', 'filter_check_id__icontains', 'filter_check_id__in', 'filter_delta', 'filter_delta__in', 'filter_id', 'filter_id__in', 'filter_impact', 'filter_impact__in', 'filter_inserted_at', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_provider', 'filter_provider__in', 'filter_provider_alias', 'filter_provider_alias__icontains', 'filter_provider_alias__in', 'filter_provider_type', 'filter_provider_type__in', 'filter_provider_uid', 'filter_provider_uid__icontains', 'filter_provider_uid__in', 'filter_region', 'filter_region__icontains', 'filter_region__in', 'filter_resource_name', 'filter_resource_name__icontains', 'filter_resource_name__in', 'filter_resource_type', 'filter_resource_type__icontains', 'filter_resource_type__in', 'filter_resource_uid', 'filter_resource_uid__icontains', 'filter_resource_uid__in', 'filter_resources', 'filter_scan', 'filter_scan__in', 'filter_search', 'filter_service', 'filter_service__icontains', 'filter_service__in', 'filter_severity', 'filter_severity__in', 'filter_status', 'filter_status__in', 'filter_uid', 'filter_uid__in', 'filter_updated_at', 'filter_updated_at__gte', 'filter_updated_at__lte', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method findings_findings_services_regions_retrieve" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_finding_dynamic_filters' in params:
            query_params.append(('fields[finding-dynamic-filters]', params['fields_finding_dynamic_filters']))  # noqa: E501
            collection_formats['fields[finding-dynamic-filters]'] = 'csv'  # noqa: E501
        if 'filter_check_id' in params:
            query_params.append(('filter[check_id]', params['filter_check_id']))  # noqa: E501
        if 'filter_check_id__icontains' in params:
            query_params.append(('filter[check_id__icontains]', params['filter_check_id__icontains']))  # noqa: E501
        if 'filter_check_id__in' in params:
            query_params.append(('filter[check_id__in]', params['filter_check_id__in']))  # noqa: E501
            collection_formats['filter[check_id__in]'] = 'csv'  # noqa: E501
        if 'filter_delta' in params:
            query_params.append(('filter[delta]', params['filter_delta']))  # noqa: E501
        if 'filter_delta__in' in params:
            query_params.append(('filter[delta__in]', params['filter_delta__in']))  # noqa: E501
            collection_formats['filter[delta__in]'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter[id]', params['filter_id']))  # noqa: E501
        if 'filter_id__in' in params:
            query_params.append(('filter[id__in]', params['filter_id__in']))  # noqa: E501
            collection_formats['filter[id__in]'] = 'csv'  # noqa: E501
        if 'filter_impact' in params:
            query_params.append(('filter[impact]', params['filter_impact']))  # noqa: E501
        if 'filter_impact__in' in params:
            query_params.append(('filter[impact__in]', params['filter_impact__in']))  # noqa: E501
            collection_formats['filter[impact__in]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_provider' in params:
            query_params.append(('filter[provider]', params['filter_provider']))  # noqa: E501
        if 'filter_provider__in' in params:
            query_params.append(('filter[provider__in]', params['filter_provider__in']))  # noqa: E501
            collection_formats['filter[provider__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_alias' in params:
            query_params.append(('filter[provider_alias]', params['filter_provider_alias']))  # noqa: E501
        if 'filter_provider_alias__icontains' in params:
            query_params.append(('filter[provider_alias__icontains]', params['filter_provider_alias__icontains']))  # noqa: E501
        if 'filter_provider_alias__in' in params:
            query_params.append(('filter[provider_alias__in]', params['filter_provider_alias__in']))  # noqa: E501
            collection_formats['filter[provider_alias__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_uid' in params:
            query_params.append(('filter[provider_uid]', params['filter_provider_uid']))  # noqa: E501
        if 'filter_provider_uid__icontains' in params:
            query_params.append(('filter[provider_uid__icontains]', params['filter_provider_uid__icontains']))  # noqa: E501
        if 'filter_provider_uid__in' in params:
            query_params.append(('filter[provider_uid__in]', params['filter_provider_uid__in']))  # noqa: E501
            collection_formats['filter[provider_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_region' in params:
            query_params.append(('filter[region]', params['filter_region']))  # noqa: E501
        if 'filter_region__icontains' in params:
            query_params.append(('filter[region__icontains]', params['filter_region__icontains']))  # noqa: E501
        if 'filter_region__in' in params:
            query_params.append(('filter[region__in]', params['filter_region__in']))  # noqa: E501
            collection_formats['filter[region__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_name' in params:
            query_params.append(('filter[resource_name]', params['filter_resource_name']))  # noqa: E501
        if 'filter_resource_name__icontains' in params:
            query_params.append(('filter[resource_name__icontains]', params['filter_resource_name__icontains']))  # noqa: E501
        if 'filter_resource_name__in' in params:
            query_params.append(('filter[resource_name__in]', params['filter_resource_name__in']))  # noqa: E501
            collection_formats['filter[resource_name__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_type' in params:
            query_params.append(('filter[resource_type]', params['filter_resource_type']))  # noqa: E501
        if 'filter_resource_type__icontains' in params:
            query_params.append(('filter[resource_type__icontains]', params['filter_resource_type__icontains']))  # noqa: E501
        if 'filter_resource_type__in' in params:
            query_params.append(('filter[resource_type__in]', params['filter_resource_type__in']))  # noqa: E501
            collection_formats['filter[resource_type__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_uid' in params:
            query_params.append(('filter[resource_uid]', params['filter_resource_uid']))  # noqa: E501
        if 'filter_resource_uid__icontains' in params:
            query_params.append(('filter[resource_uid__icontains]', params['filter_resource_uid__icontains']))  # noqa: E501
        if 'filter_resource_uid__in' in params:
            query_params.append(('filter[resource_uid__in]', params['filter_resource_uid__in']))  # noqa: E501
            collection_formats['filter[resource_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_resources' in params:
            query_params.append(('filter[resources]', params['filter_resources']))  # noqa: E501
            collection_formats['filter[resources]'] = 'csv'  # noqa: E501
        if 'filter_scan' in params:
            query_params.append(('filter[scan]', params['filter_scan']))  # noqa: E501
        if 'filter_scan__in' in params:
            query_params.append(('filter[scan__in]', params['filter_scan__in']))  # noqa: E501
            collection_formats['filter[scan__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'filter_service' in params:
            query_params.append(('filter[service]', params['filter_service']))  # noqa: E501
        if 'filter_service__icontains' in params:
            query_params.append(('filter[service__icontains]', params['filter_service__icontains']))  # noqa: E501
        if 'filter_service__in' in params:
            query_params.append(('filter[service__in]', params['filter_service__in']))  # noqa: E501
            collection_formats['filter[service__in]'] = 'csv'  # noqa: E501
        if 'filter_severity' in params:
            query_params.append(('filter[severity]', params['filter_severity']))  # noqa: E501
        if 'filter_severity__in' in params:
            query_params.append(('filter[severity__in]', params['filter_severity__in']))  # noqa: E501
            collection_formats['filter[severity__in]'] = 'csv'  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_status__in' in params:
            query_params.append(('filter[status__in]', params['filter_status__in']))  # noqa: E501
            collection_formats['filter[status__in]'] = 'csv'  # noqa: E501
        if 'filter_uid' in params:
            query_params.append(('filter[uid]', params['filter_uid']))  # noqa: E501
        if 'filter_uid__in' in params:
            query_params.append(('filter[uid__in]', params['filter_uid__in']))  # noqa: E501
            collection_formats['filter[uid__in]'] = 'csv'  # noqa: E501
        if 'filter_updated_at' in params:
            query_params.append(('filter[updated_at]', params['filter_updated_at']))  # noqa: E501
        if 'filter_updated_at__gte' in params:
            query_params.append(('filter[updated_at__gte]', params['filter_updated_at__gte']))  # noqa: E501
        if 'filter_updated_at__lte' in params:
            query_params.append(('filter[updated_at__lte]', params['filter_updated_at__lte']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/findings/findings_services_regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingDynamicFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def findings_list(self, filter_inserted_at, **kwargs):  # noqa: E501
        """List all findings  # noqa: E501

        Retrieve a list of all findings with options for filtering by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_list(filter_inserted_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date filter_inserted_at: At least one of the variations of the `filter[inserted_at]` filter must be provided. (required)
        :param list[str] fields_findings: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_check_id:
        :param str filter_check_id__icontains:
        :param list[str] filter_check_id__in: Multiple values may be separated by commas.
        :param str filter_delta: * `new` - New * `changed` - Changed
        :param list[str] filter_delta__in: Multiple values may be separated by commas.
        :param str filter_id:
        :param list[str] filter_id__in: Multiple values may be separated by commas.
        :param str filter_impact: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_impact__in: Multiple values may be separated by commas.
        :param date filter_inserted_at__date:
        :param date filter_inserted_at__gte: Maximum date range is 7 days.
        :param date filter_inserted_at__lte: Maximum date range is 7 days.
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_resource_name:
        :param str filter_resource_name__icontains:
        :param list[str] filter_resource_name__in: Multiple values may be separated by commas.
        :param str filter_resource_type:
        :param str filter_resource_type__icontains:
        :param list[str] filter_resource_type__in: Multiple values may be separated by commas.
        :param str filter_resource_uid:
        :param str filter_resource_uid__icontains:
        :param list[str] filter_resource_uid__in: Multiple values may be separated by commas.
        :param list[str] filter_resources: Multiple values may be separated by commas.
        :param str filter_scan:
        :param list[str] filter_scan__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param str filter_service:
        :param str filter_service__icontains:
        :param list[str] filter_service__in: Multiple values may be separated by commas.
        :param str filter_severity: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_severity__in: Multiple values may be separated by commas.
        :param str filter_status: * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted
        :param list[str] filter_status__in: Multiple values may be separated by commas.
        :param str filter_uid:
        :param list[str] filter_uid__in: Multiple values may be separated by commas.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param list[str] include: include query parameter to allow the client to customize which related resources should be returned.
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedFindingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.findings_list_with_http_info(filter_inserted_at, **kwargs)  # noqa: E501
        else:
            (data) = self.findings_list_with_http_info(filter_inserted_at, **kwargs)  # noqa: E501
            return data

    def findings_list_with_http_info(self, filter_inserted_at, **kwargs):  # noqa: E501
        """List all findings  # noqa: E501

        Retrieve a list of all findings with options for filtering by various criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_list_with_http_info(filter_inserted_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date filter_inserted_at: At least one of the variations of the `filter[inserted_at]` filter must be provided. (required)
        :param list[str] fields_findings: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_check_id:
        :param str filter_check_id__icontains:
        :param list[str] filter_check_id__in: Multiple values may be separated by commas.
        :param str filter_delta: * `new` - New * `changed` - Changed
        :param list[str] filter_delta__in: Multiple values may be separated by commas.
        :param str filter_id:
        :param list[str] filter_id__in: Multiple values may be separated by commas.
        :param str filter_impact: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_impact__in: Multiple values may be separated by commas.
        :param date filter_inserted_at__date:
        :param date filter_inserted_at__gte: Maximum date range is 7 days.
        :param date filter_inserted_at__lte: Maximum date range is 7 days.
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_resource_name:
        :param str filter_resource_name__icontains:
        :param list[str] filter_resource_name__in: Multiple values may be separated by commas.
        :param str filter_resource_type:
        :param str filter_resource_type__icontains:
        :param list[str] filter_resource_type__in: Multiple values may be separated by commas.
        :param str filter_resource_uid:
        :param str filter_resource_uid__icontains:
        :param list[str] filter_resource_uid__in: Multiple values may be separated by commas.
        :param list[str] filter_resources: Multiple values may be separated by commas.
        :param str filter_scan:
        :param list[str] filter_scan__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param str filter_service:
        :param str filter_service__icontains:
        :param list[str] filter_service__in: Multiple values may be separated by commas.
        :param str filter_severity: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_severity__in: Multiple values may be separated by commas.
        :param str filter_status: * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted
        :param list[str] filter_status__in: Multiple values may be separated by commas.
        :param str filter_uid:
        :param list[str] filter_uid__in: Multiple values may be separated by commas.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param list[str] include: include query parameter to allow the client to customize which related resources should be returned.
        :param int page_number: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: PaginatedFindingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_inserted_at', 'fields_findings', 'filter_check_id', 'filter_check_id__icontains', 'filter_check_id__in', 'filter_delta', 'filter_delta__in', 'filter_id', 'filter_id__in', 'filter_impact', 'filter_impact__in', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_provider', 'filter_provider__in', 'filter_provider_alias', 'filter_provider_alias__icontains', 'filter_provider_alias__in', 'filter_provider_type', 'filter_provider_type__in', 'filter_provider_uid', 'filter_provider_uid__icontains', 'filter_provider_uid__in', 'filter_region', 'filter_region__icontains', 'filter_region__in', 'filter_resource_name', 'filter_resource_name__icontains', 'filter_resource_name__in', 'filter_resource_type', 'filter_resource_type__icontains', 'filter_resource_type__in', 'filter_resource_uid', 'filter_resource_uid__icontains', 'filter_resource_uid__in', 'filter_resources', 'filter_scan', 'filter_scan__in', 'filter_search', 'filter_service', 'filter_service__icontains', 'filter_service__in', 'filter_severity', 'filter_severity__in', 'filter_status', 'filter_status__in', 'filter_uid', 'filter_uid__in', 'filter_updated_at', 'filter_updated_at__gte', 'filter_updated_at__lte', 'include', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method findings_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_inserted_at' is set
        if ('filter_inserted_at' not in params or
                params['filter_inserted_at'] is None):
            raise ValueError("Missing the required parameter `filter_inserted_at` when calling `findings_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_findings' in params:
            query_params.append(('fields[findings]', params['fields_findings']))  # noqa: E501
            collection_formats['fields[findings]'] = 'csv'  # noqa: E501
        if 'filter_check_id' in params:
            query_params.append(('filter[check_id]', params['filter_check_id']))  # noqa: E501
        if 'filter_check_id__icontains' in params:
            query_params.append(('filter[check_id__icontains]', params['filter_check_id__icontains']))  # noqa: E501
        if 'filter_check_id__in' in params:
            query_params.append(('filter[check_id__in]', params['filter_check_id__in']))  # noqa: E501
            collection_formats['filter[check_id__in]'] = 'csv'  # noqa: E501
        if 'filter_delta' in params:
            query_params.append(('filter[delta]', params['filter_delta']))  # noqa: E501
        if 'filter_delta__in' in params:
            query_params.append(('filter[delta__in]', params['filter_delta__in']))  # noqa: E501
            collection_formats['filter[delta__in]'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter[id]', params['filter_id']))  # noqa: E501
        if 'filter_id__in' in params:
            query_params.append(('filter[id__in]', params['filter_id__in']))  # noqa: E501
            collection_formats['filter[id__in]'] = 'csv'  # noqa: E501
        if 'filter_impact' in params:
            query_params.append(('filter[impact]', params['filter_impact']))  # noqa: E501
        if 'filter_impact__in' in params:
            query_params.append(('filter[impact__in]', params['filter_impact__in']))  # noqa: E501
            collection_formats['filter[impact__in]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_provider' in params:
            query_params.append(('filter[provider]', params['filter_provider']))  # noqa: E501
        if 'filter_provider__in' in params:
            query_params.append(('filter[provider__in]', params['filter_provider__in']))  # noqa: E501
            collection_formats['filter[provider__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_alias' in params:
            query_params.append(('filter[provider_alias]', params['filter_provider_alias']))  # noqa: E501
        if 'filter_provider_alias__icontains' in params:
            query_params.append(('filter[provider_alias__icontains]', params['filter_provider_alias__icontains']))  # noqa: E501
        if 'filter_provider_alias__in' in params:
            query_params.append(('filter[provider_alias__in]', params['filter_provider_alias__in']))  # noqa: E501
            collection_formats['filter[provider_alias__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_uid' in params:
            query_params.append(('filter[provider_uid]', params['filter_provider_uid']))  # noqa: E501
        if 'filter_provider_uid__icontains' in params:
            query_params.append(('filter[provider_uid__icontains]', params['filter_provider_uid__icontains']))  # noqa: E501
        if 'filter_provider_uid__in' in params:
            query_params.append(('filter[provider_uid__in]', params['filter_provider_uid__in']))  # noqa: E501
            collection_formats['filter[provider_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_region' in params:
            query_params.append(('filter[region]', params['filter_region']))  # noqa: E501
        if 'filter_region__icontains' in params:
            query_params.append(('filter[region__icontains]', params['filter_region__icontains']))  # noqa: E501
        if 'filter_region__in' in params:
            query_params.append(('filter[region__in]', params['filter_region__in']))  # noqa: E501
            collection_formats['filter[region__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_name' in params:
            query_params.append(('filter[resource_name]', params['filter_resource_name']))  # noqa: E501
        if 'filter_resource_name__icontains' in params:
            query_params.append(('filter[resource_name__icontains]', params['filter_resource_name__icontains']))  # noqa: E501
        if 'filter_resource_name__in' in params:
            query_params.append(('filter[resource_name__in]', params['filter_resource_name__in']))  # noqa: E501
            collection_formats['filter[resource_name__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_type' in params:
            query_params.append(('filter[resource_type]', params['filter_resource_type']))  # noqa: E501
        if 'filter_resource_type__icontains' in params:
            query_params.append(('filter[resource_type__icontains]', params['filter_resource_type__icontains']))  # noqa: E501
        if 'filter_resource_type__in' in params:
            query_params.append(('filter[resource_type__in]', params['filter_resource_type__in']))  # noqa: E501
            collection_formats['filter[resource_type__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_uid' in params:
            query_params.append(('filter[resource_uid]', params['filter_resource_uid']))  # noqa: E501
        if 'filter_resource_uid__icontains' in params:
            query_params.append(('filter[resource_uid__icontains]', params['filter_resource_uid__icontains']))  # noqa: E501
        if 'filter_resource_uid__in' in params:
            query_params.append(('filter[resource_uid__in]', params['filter_resource_uid__in']))  # noqa: E501
            collection_formats['filter[resource_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_resources' in params:
            query_params.append(('filter[resources]', params['filter_resources']))  # noqa: E501
            collection_formats['filter[resources]'] = 'csv'  # noqa: E501
        if 'filter_scan' in params:
            query_params.append(('filter[scan]', params['filter_scan']))  # noqa: E501
        if 'filter_scan__in' in params:
            query_params.append(('filter[scan__in]', params['filter_scan__in']))  # noqa: E501
            collection_formats['filter[scan__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'filter_service' in params:
            query_params.append(('filter[service]', params['filter_service']))  # noqa: E501
        if 'filter_service__icontains' in params:
            query_params.append(('filter[service__icontains]', params['filter_service__icontains']))  # noqa: E501
        if 'filter_service__in' in params:
            query_params.append(('filter[service__in]', params['filter_service__in']))  # noqa: E501
            collection_formats['filter[service__in]'] = 'csv'  # noqa: E501
        if 'filter_severity' in params:
            query_params.append(('filter[severity]', params['filter_severity']))  # noqa: E501
        if 'filter_severity__in' in params:
            query_params.append(('filter[severity__in]', params['filter_severity__in']))  # noqa: E501
            collection_formats['filter[severity__in]'] = 'csv'  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_status__in' in params:
            query_params.append(('filter[status__in]', params['filter_status__in']))  # noqa: E501
            collection_formats['filter[status__in]'] = 'csv'  # noqa: E501
        if 'filter_uid' in params:
            query_params.append(('filter[uid]', params['filter_uid']))  # noqa: E501
        if 'filter_uid__in' in params:
            query_params.append(('filter[uid__in]', params['filter_uid__in']))  # noqa: E501
            collection_formats['filter[uid__in]'] = 'csv'  # noqa: E501
        if 'filter_updated_at' in params:
            query_params.append(('filter[updated_at]', params['filter_updated_at']))  # noqa: E501
        if 'filter_updated_at__gte' in params:
            query_params.append(('filter[updated_at__gte]', params['filter_updated_at__gte']))  # noqa: E501
        if 'filter_updated_at__lte' in params:
            query_params.append(('filter[updated_at__lte]', params['filter_updated_at__lte']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page[number]', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page[size]', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/findings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedFindingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def findings_metadata_retrieve(self, filter_inserted_at, **kwargs):  # noqa: E501
        """Retrieve metadata values from findings  # noqa: E501

        Fetch unique metadata values from a set of findings. This is useful for dynamic filtering.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_metadata_retrieve(filter_inserted_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date filter_inserted_at: At least one of the variations of the `filter[inserted_at]` filter must be provided. (required)
        :param list[str] fields_findings_metadata: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_check_id:
        :param str filter_check_id__icontains:
        :param list[str] filter_check_id__in: Multiple values may be separated by commas.
        :param str filter_delta: * `new` - New * `changed` - Changed
        :param list[str] filter_delta__in: Multiple values may be separated by commas.
        :param str filter_id:
        :param list[str] filter_id__in: Multiple values may be separated by commas.
        :param str filter_impact: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_impact__in: Multiple values may be separated by commas.
        :param date filter_inserted_at__date:
        :param date filter_inserted_at__gte: Maximum date range is 7 days.
        :param date filter_inserted_at__lte: Maximum date range is 7 days.
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_resource_name:
        :param str filter_resource_name__icontains:
        :param list[str] filter_resource_name__in: Multiple values may be separated by commas.
        :param str filter_resource_type:
        :param str filter_resource_type__icontains:
        :param list[str] filter_resource_type__in: Multiple values may be separated by commas.
        :param str filter_resource_uid:
        :param str filter_resource_uid__icontains:
        :param list[str] filter_resource_uid__in: Multiple values may be separated by commas.
        :param list[str] filter_resources: Multiple values may be separated by commas.
        :param str filter_scan:
        :param list[str] filter_scan__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param str filter_service:
        :param str filter_service__icontains:
        :param list[str] filter_service__in: Multiple values may be separated by commas.
        :param str filter_severity: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_severity__in: Multiple values may be separated by commas.
        :param str filter_status: * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted
        :param list[str] filter_status__in: Multiple values may be separated by commas.
        :param str filter_uid:
        :param list[str] filter_uid__in: Multiple values may be separated by commas.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: FindingMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.findings_metadata_retrieve_with_http_info(filter_inserted_at, **kwargs)  # noqa: E501
        else:
            (data) = self.findings_metadata_retrieve_with_http_info(filter_inserted_at, **kwargs)  # noqa: E501
            return data

    def findings_metadata_retrieve_with_http_info(self, filter_inserted_at, **kwargs):  # noqa: E501
        """Retrieve metadata values from findings  # noqa: E501

        Fetch unique metadata values from a set of findings. This is useful for dynamic filtering.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_metadata_retrieve_with_http_info(filter_inserted_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date filter_inserted_at: At least one of the variations of the `filter[inserted_at]` filter must be provided. (required)
        :param list[str] fields_findings_metadata: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param str filter_check_id:
        :param str filter_check_id__icontains:
        :param list[str] filter_check_id__in: Multiple values may be separated by commas.
        :param str filter_delta: * `new` - New * `changed` - Changed
        :param list[str] filter_delta__in: Multiple values may be separated by commas.
        :param str filter_id:
        :param list[str] filter_id__in: Multiple values may be separated by commas.
        :param str filter_impact: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_impact__in: Multiple values may be separated by commas.
        :param date filter_inserted_at__date:
        :param date filter_inserted_at__gte: Maximum date range is 7 days.
        :param date filter_inserted_at__lte: Maximum date range is 7 days.
        :param str filter_provider:
        :param list[str] filter_provider__in: Multiple values may be separated by commas.
        :param str filter_provider_alias:
        :param str filter_provider_alias__icontains:
        :param list[str] filter_provider_alias__in: Multiple values may be separated by commas.
        :param str filter_provider_type: * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param list[str] filter_provider_type__in: Multiple values may be separated by commas.  * `aws` - AWS * `azure` - Azure * `gcp` - GCP * `kubernetes` - Kubernetes
        :param str filter_provider_uid:
        :param str filter_provider_uid__icontains:
        :param list[str] filter_provider_uid__in: Multiple values may be separated by commas.
        :param str filter_region:
        :param str filter_region__icontains:
        :param list[str] filter_region__in: Multiple values may be separated by commas.
        :param str filter_resource_name:
        :param str filter_resource_name__icontains:
        :param list[str] filter_resource_name__in: Multiple values may be separated by commas.
        :param str filter_resource_type:
        :param str filter_resource_type__icontains:
        :param list[str] filter_resource_type__in: Multiple values may be separated by commas.
        :param str filter_resource_uid:
        :param str filter_resource_uid__icontains:
        :param list[str] filter_resource_uid__in: Multiple values may be separated by commas.
        :param list[str] filter_resources: Multiple values may be separated by commas.
        :param str filter_scan:
        :param list[str] filter_scan__in: Multiple values may be separated by commas.
        :param str filter_search: A search term.
        :param str filter_service:
        :param str filter_service__icontains:
        :param list[str] filter_service__in: Multiple values may be separated by commas.
        :param str filter_severity: * `critical` - Critical * `high` - High * `medium` - Medium * `low` - Low * `informational` - Informational
        :param list[str] filter_severity__in: Multiple values may be separated by commas.
        :param str filter_status: * `FAIL` - Fail * `PASS` - Pass * `MANUAL` - Manual * `MUTED` - Muted
        :param list[str] filter_status__in: Multiple values may be separated by commas.
        :param str filter_uid:
        :param list[str] filter_uid__in: Multiple values may be separated by commas.
        :param date filter_updated_at:
        :param datetime filter_updated_at__gte:
        :param datetime filter_updated_at__lte:
        :param list[str] sort: [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting)
        :return: FindingMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_inserted_at', 'fields_findings_metadata', 'filter_check_id', 'filter_check_id__icontains', 'filter_check_id__in', 'filter_delta', 'filter_delta__in', 'filter_id', 'filter_id__in', 'filter_impact', 'filter_impact__in', 'filter_inserted_at__date', 'filter_inserted_at__gte', 'filter_inserted_at__lte', 'filter_provider', 'filter_provider__in', 'filter_provider_alias', 'filter_provider_alias__icontains', 'filter_provider_alias__in', 'filter_provider_type', 'filter_provider_type__in', 'filter_provider_uid', 'filter_provider_uid__icontains', 'filter_provider_uid__in', 'filter_region', 'filter_region__icontains', 'filter_region__in', 'filter_resource_name', 'filter_resource_name__icontains', 'filter_resource_name__in', 'filter_resource_type', 'filter_resource_type__icontains', 'filter_resource_type__in', 'filter_resource_uid', 'filter_resource_uid__icontains', 'filter_resource_uid__in', 'filter_resources', 'filter_scan', 'filter_scan__in', 'filter_search', 'filter_service', 'filter_service__icontains', 'filter_service__in', 'filter_severity', 'filter_severity__in', 'filter_status', 'filter_status__in', 'filter_uid', 'filter_uid__in', 'filter_updated_at', 'filter_updated_at__gte', 'filter_updated_at__lte', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method findings_metadata_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_inserted_at' is set
        if ('filter_inserted_at' not in params or
                params['filter_inserted_at'] is None):
            raise ValueError("Missing the required parameter `filter_inserted_at` when calling `findings_metadata_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields_findings_metadata' in params:
            query_params.append(('fields[findings-metadata]', params['fields_findings_metadata']))  # noqa: E501
            collection_formats['fields[findings-metadata]'] = 'csv'  # noqa: E501
        if 'filter_check_id' in params:
            query_params.append(('filter[check_id]', params['filter_check_id']))  # noqa: E501
        if 'filter_check_id__icontains' in params:
            query_params.append(('filter[check_id__icontains]', params['filter_check_id__icontains']))  # noqa: E501
        if 'filter_check_id__in' in params:
            query_params.append(('filter[check_id__in]', params['filter_check_id__in']))  # noqa: E501
            collection_formats['filter[check_id__in]'] = 'csv'  # noqa: E501
        if 'filter_delta' in params:
            query_params.append(('filter[delta]', params['filter_delta']))  # noqa: E501
        if 'filter_delta__in' in params:
            query_params.append(('filter[delta__in]', params['filter_delta__in']))  # noqa: E501
            collection_formats['filter[delta__in]'] = 'csv'  # noqa: E501
        if 'filter_id' in params:
            query_params.append(('filter[id]', params['filter_id']))  # noqa: E501
        if 'filter_id__in' in params:
            query_params.append(('filter[id__in]', params['filter_id__in']))  # noqa: E501
            collection_formats['filter[id__in]'] = 'csv'  # noqa: E501
        if 'filter_impact' in params:
            query_params.append(('filter[impact]', params['filter_impact']))  # noqa: E501
        if 'filter_impact__in' in params:
            query_params.append(('filter[impact__in]', params['filter_impact__in']))  # noqa: E501
            collection_formats['filter[impact__in]'] = 'csv'  # noqa: E501
        if 'filter_inserted_at' in params:
            query_params.append(('filter[inserted_at]', params['filter_inserted_at']))  # noqa: E501
        if 'filter_inserted_at__date' in params:
            query_params.append(('filter[inserted_at__date]', params['filter_inserted_at__date']))  # noqa: E501
        if 'filter_inserted_at__gte' in params:
            query_params.append(('filter[inserted_at__gte]', params['filter_inserted_at__gte']))  # noqa: E501
        if 'filter_inserted_at__lte' in params:
            query_params.append(('filter[inserted_at__lte]', params['filter_inserted_at__lte']))  # noqa: E501
        if 'filter_provider' in params:
            query_params.append(('filter[provider]', params['filter_provider']))  # noqa: E501
        if 'filter_provider__in' in params:
            query_params.append(('filter[provider__in]', params['filter_provider__in']))  # noqa: E501
            collection_formats['filter[provider__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_alias' in params:
            query_params.append(('filter[provider_alias]', params['filter_provider_alias']))  # noqa: E501
        if 'filter_provider_alias__icontains' in params:
            query_params.append(('filter[provider_alias__icontains]', params['filter_provider_alias__icontains']))  # noqa: E501
        if 'filter_provider_alias__in' in params:
            query_params.append(('filter[provider_alias__in]', params['filter_provider_alias__in']))  # noqa: E501
            collection_formats['filter[provider_alias__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_type' in params:
            query_params.append(('filter[provider_type]', params['filter_provider_type']))  # noqa: E501
        if 'filter_provider_type__in' in params:
            query_params.append(('filter[provider_type__in]', params['filter_provider_type__in']))  # noqa: E501
            collection_formats['filter[provider_type__in]'] = 'csv'  # noqa: E501
        if 'filter_provider_uid' in params:
            query_params.append(('filter[provider_uid]', params['filter_provider_uid']))  # noqa: E501
        if 'filter_provider_uid__icontains' in params:
            query_params.append(('filter[provider_uid__icontains]', params['filter_provider_uid__icontains']))  # noqa: E501
        if 'filter_provider_uid__in' in params:
            query_params.append(('filter[provider_uid__in]', params['filter_provider_uid__in']))  # noqa: E501
            collection_formats['filter[provider_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_region' in params:
            query_params.append(('filter[region]', params['filter_region']))  # noqa: E501
        if 'filter_region__icontains' in params:
            query_params.append(('filter[region__icontains]', params['filter_region__icontains']))  # noqa: E501
        if 'filter_region__in' in params:
            query_params.append(('filter[region__in]', params['filter_region__in']))  # noqa: E501
            collection_formats['filter[region__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_name' in params:
            query_params.append(('filter[resource_name]', params['filter_resource_name']))  # noqa: E501
        if 'filter_resource_name__icontains' in params:
            query_params.append(('filter[resource_name__icontains]', params['filter_resource_name__icontains']))  # noqa: E501
        if 'filter_resource_name__in' in params:
            query_params.append(('filter[resource_name__in]', params['filter_resource_name__in']))  # noqa: E501
            collection_formats['filter[resource_name__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_type' in params:
            query_params.append(('filter[resource_type]', params['filter_resource_type']))  # noqa: E501
        if 'filter_resource_type__icontains' in params:
            query_params.append(('filter[resource_type__icontains]', params['filter_resource_type__icontains']))  # noqa: E501
        if 'filter_resource_type__in' in params:
            query_params.append(('filter[resource_type__in]', params['filter_resource_type__in']))  # noqa: E501
            collection_formats['filter[resource_type__in]'] = 'csv'  # noqa: E501
        if 'filter_resource_uid' in params:
            query_params.append(('filter[resource_uid]', params['filter_resource_uid']))  # noqa: E501
        if 'filter_resource_uid__icontains' in params:
            query_params.append(('filter[resource_uid__icontains]', params['filter_resource_uid__icontains']))  # noqa: E501
        if 'filter_resource_uid__in' in params:
            query_params.append(('filter[resource_uid__in]', params['filter_resource_uid__in']))  # noqa: E501
            collection_formats['filter[resource_uid__in]'] = 'csv'  # noqa: E501
        if 'filter_resources' in params:
            query_params.append(('filter[resources]', params['filter_resources']))  # noqa: E501
            collection_formats['filter[resources]'] = 'csv'  # noqa: E501
        if 'filter_scan' in params:
            query_params.append(('filter[scan]', params['filter_scan']))  # noqa: E501
        if 'filter_scan__in' in params:
            query_params.append(('filter[scan__in]', params['filter_scan__in']))  # noqa: E501
            collection_formats['filter[scan__in]'] = 'csv'  # noqa: E501
        if 'filter_search' in params:
            query_params.append(('filter[search]', params['filter_search']))  # noqa: E501
        if 'filter_service' in params:
            query_params.append(('filter[service]', params['filter_service']))  # noqa: E501
        if 'filter_service__icontains' in params:
            query_params.append(('filter[service__icontains]', params['filter_service__icontains']))  # noqa: E501
        if 'filter_service__in' in params:
            query_params.append(('filter[service__in]', params['filter_service__in']))  # noqa: E501
            collection_formats['filter[service__in]'] = 'csv'  # noqa: E501
        if 'filter_severity' in params:
            query_params.append(('filter[severity]', params['filter_severity']))  # noqa: E501
        if 'filter_severity__in' in params:
            query_params.append(('filter[severity__in]', params['filter_severity__in']))  # noqa: E501
            collection_formats['filter[severity__in]'] = 'csv'  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter[status]', params['filter_status']))  # noqa: E501
        if 'filter_status__in' in params:
            query_params.append(('filter[status__in]', params['filter_status__in']))  # noqa: E501
            collection_formats['filter[status__in]'] = 'csv'  # noqa: E501
        if 'filter_uid' in params:
            query_params.append(('filter[uid]', params['filter_uid']))  # noqa: E501
        if 'filter_uid__in' in params:
            query_params.append(('filter[uid__in]', params['filter_uid__in']))  # noqa: E501
            collection_formats['filter[uid__in]'] = 'csv'  # noqa: E501
        if 'filter_updated_at' in params:
            query_params.append(('filter[updated_at]', params['filter_updated_at']))  # noqa: E501
        if 'filter_updated_at__gte' in params:
            query_params.append(('filter[updated_at__gte]', params['filter_updated_at__gte']))  # noqa: E501
        if 'filter_updated_at__lte' in params:
            query_params.append(('filter[updated_at__lte]', params['filter_updated_at__lte']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/findings/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def findings_retrieve(self, id, **kwargs):  # noqa: E501
        """Retrieve data from a specific finding  # noqa: E501

        Fetch detailed information about a specific finding by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this finding. (required)
        :param list[str] fields_findings: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param list[str] include: include query parameter to allow the client to customize which related resources should be returned.
        :return: FindingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.findings_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.findings_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def findings_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve data from a specific finding  # noqa: E501

        Fetch detailed information about a specific finding by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.findings_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: A UUID string identifying this finding. (required)
        :param list[str] fields_findings: endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
        :param list[str] include: include query parameter to allow the client to customize which related resources should be returned.
        :return: FindingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields_findings', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method findings_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `findings_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields_findings' in params:
            query_params.append(('fields[findings]', params['fields_findings']))  # noqa: E501
            collection_formats['fields[findings]'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/findings/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FindingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
