# coding: utf-8

"""
    Prowler API

    Prowler API specification.  This file is auto-generated.  # noqa: E501

    OpenAPI spec version: 1.6.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TokenApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tokens_create(self, body, **kwargs):  # noqa: E501
        """Obtain a token  # noqa: E501

        Obtain a token by providing valid credentials and an optional tenant ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequest body: (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tokens_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Obtain a token  # noqa: E501

        Obtain a token by providing valid credentials and an optional tenant ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequest body: (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tokens_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_create(self, data2, data, **kwargs):  # noqa: E501
        """Obtain a token  # noqa: E501

        Obtain a token by providing valid credentials and an optional tenant ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequestData data2: (required)
        :param TokenRequestData data: (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tokens_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Obtain a token  # noqa: E501

        Obtain a token by providing valid credentials and an optional tenant ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequestData data2: (required)
        :param TokenRequestData data: (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tokens_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tokens_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_create(self, data2, data, **kwargs):  # noqa: E501
        """Obtain a token  # noqa: E501

        Obtain a token by providing valid credentials and an optional tenant ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequestData data2: (required)
        :param TokenRequestData data: (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tokens_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Obtain a token  # noqa: E501

        Obtain a token by providing valid credentials and an optional tenant ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRequestData data2: (required)
        :param TokenRequestData data: (required)
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tokens_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tokens_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_refresh_create(self, body, **kwargs):  # noqa: E501
        """Refresh a token  # noqa: E501

        Refresh an access token by providing a valid refresh token. Former refresh tokens are invalidated when a new one is issued.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_refresh_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefreshRequest body: (required)
        :return: TokenRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_refresh_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_refresh_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tokens_refresh_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Refresh a token  # noqa: E501

        Refresh an access token by providing a valid refresh token. Former refresh tokens are invalidated when a new one is issued.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_refresh_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefreshRequest body: (required)
        :return: TokenRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_refresh_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tokens_refresh_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenRefreshResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_refresh_create(self, data2, data, **kwargs):  # noqa: E501
        """Refresh a token  # noqa: E501

        Refresh an access token by providing a valid refresh token. Former refresh tokens are invalidated when a new one is issued.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_refresh_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefreshRequestData data2: (required)
        :param TokenRefreshRequestData data: (required)
        :return: TokenRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_refresh_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_refresh_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tokens_refresh_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Refresh a token  # noqa: E501

        Refresh an access token by providing a valid refresh token. Former refresh tokens are invalidated when a new one is issued.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_refresh_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefreshRequestData data2: (required)
        :param TokenRefreshRequestData data: (required)
        :return: TokenRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_refresh_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tokens_refresh_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tokens_refresh_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenRefreshResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_refresh_create(self, data2, data, **kwargs):  # noqa: E501
        """Refresh a token  # noqa: E501

        Refresh an access token by providing a valid refresh token. Former refresh tokens are invalidated when a new one is issued.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_refresh_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefreshRequestData data2: (required)
        :param TokenRefreshRequestData data: (required)
        :return: TokenRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_refresh_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_refresh_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tokens_refresh_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Refresh a token  # noqa: E501

        Refresh an access token by providing a valid refresh token. Former refresh tokens are invalidated when a new one is issued.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_refresh_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenRefreshRequestData data2: (required)
        :param TokenRefreshRequestData data: (required)
        :return: TokenRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_refresh_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tokens_refresh_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tokens_refresh_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenRefreshResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_switch_create(self, body, **kwargs):  # noqa: E501
        """Switch tenant using a valid tenant ID  # noqa: E501

        Switch tenant by providing a valid tenant ID. The authenticated user must belong to the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_switch_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenSwitchTenantRequest body: (required)
        :return: TokenSwitchTenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_switch_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_switch_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def tokens_switch_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Switch tenant using a valid tenant ID  # noqa: E501

        Switch tenant by providing a valid tenant ID. The authenticated user must belong to the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_switch_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenSwitchTenantRequest body: (required)
        :return: TokenSwitchTenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_switch_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `tokens_switch_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/switch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenSwitchTenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_switch_create(self, data2, data, **kwargs):  # noqa: E501
        """Switch tenant using a valid tenant ID  # noqa: E501

        Switch tenant by providing a valid tenant ID. The authenticated user must belong to the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_switch_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenSwitchTenantRequestData data2: (required)
        :param TokenSwitchTenantRequestData data: (required)
        :return: TokenSwitchTenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_switch_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_switch_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tokens_switch_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Switch tenant using a valid tenant ID  # noqa: E501

        Switch tenant by providing a valid tenant ID. The authenticated user must belong to the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_switch_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenSwitchTenantRequestData data2: (required)
        :param TokenSwitchTenantRequestData data: (required)
        :return: TokenSwitchTenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_switch_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tokens_switch_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tokens_switch_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/switch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenSwitchTenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokens_switch_create(self, data2, data, **kwargs):  # noqa: E501
        """Switch tenant using a valid tenant ID  # noqa: E501

        Switch tenant by providing a valid tenant ID. The authenticated user must belong to the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_switch_create(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenSwitchTenantRequestData data2: (required)
        :param TokenSwitchTenantRequestData data: (required)
        :return: TokenSwitchTenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokens_switch_create_with_http_info(data2, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tokens_switch_create_with_http_info(data2, data, **kwargs)  # noqa: E501
            return data

    def tokens_switch_create_with_http_info(self, data2, data, **kwargs):  # noqa: E501
        """Switch tenant using a valid tenant ID  # noqa: E501

        Switch tenant by providing a valid tenant ID. The authenticated user must belong to the tenant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokens_switch_create_with_http_info(data2, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TokenSwitchTenantRequestData data2: (required)
        :param TokenSwitchTenantRequestData data: (required)
        :return: TokenSwitchTenantResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data2', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokens_switch_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data2' is set
        if ('data2' not in params or
                params['data2'] is None):
            raise ValueError("Missing the required parameter `data2` when calling `tokens_switch_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tokens_switch_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501
        if 'data' in params:
            form_params.append(('data', params['data']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tokens/switch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenSwitchTenantResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
